AWSTemplateFormatVersion: '2010-09-09'
Description: AWS CloudFormation template for BlinkySign project

Parameters:
  ThingName:
    Type: String
    Default: blinkysign
    Description: Name of the IoT Thing to create

  ProjectTag:
    Type: String
    Default: blinkysign
    Description: Value for the project tag

Resources:
  # IoT Core Resources
  IoTThing:
    Type: AWS::IoT::Thing
    Properties:
      ThingName: !Ref ThingName
      AttributePayload:
        Attributes:
          project: !Ref ProjectTag

  IoTPolicy:
    Type: AWS::IoT::Policy
    Properties:
      PolicyName: !Sub ${ThingName}-policy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - iot:Connect
              - iot:Publish
              - iot:Subscribe
              - iot:Receive
            Resource:
              - !Sub arn:aws:iot:${AWS::Region}:${AWS::AccountId}:client/${ThingName}
              - !Sub arn:aws:iot:${AWS::Region}:${AWS::AccountId}:topic/${ThingName}/*
              - !Sub arn:aws:iot:${AWS::Region}:${AWS::AccountId}:topicfilter/${ThingName}/*

  IoTCertificate:
    Type: AWS::IoT::Certificate
    Properties:
      CertificateSigningRequest: !GetAtt IoTCertificateCSR.CSR
      Status: ACTIVE

  IoTCertificateCSR:
    Type: Custom::IoTCertificateCSR
    Properties:
      ServiceToken: !GetAtt IoTCertificateCSRFunction.Arn
      ThingName: !Ref ThingName

  IoTPolicyAttachment:
    Type: AWS::IoT::PolicyPrincipalAttachment
    Properties:
      PolicyName: !Ref IoTPolicy
      Principal: !GetAtt IoTCertificate.Arn

  IoTThingPrincipalAttachment:
    Type: AWS::IoT::ThingPrincipalAttachment
    Properties:
      ThingName: !Ref ThingName
      Principal: !GetAtt IoTCertificate.Arn

  # API Gateway Resources
  RestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub ${ThingName}-api
      Description: API for controlling BlinkySign
      EndpointConfiguration:
        Types:
          - REGIONAL
      Tags:
        - Key: project
          Value: !Ref ProjectTag
      ApiKeySourceType: HEADER

  ApiKey:
    Type: AWS::ApiGateway::ApiKey
    Properties:
      Name: !Sub ${ThingName}-api-key
      Description: API key for BlinkySign
      Enabled: true
      Tags:
        - Key: project
          Value: !Ref ProjectTag

  UsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    Properties:
      ApiStages:
        - ApiId: !Ref RestApi
          Stage: prod
      Description: Usage plan for BlinkySign
      UsagePlanName: !Sub ${ThingName}-usage-plan
      Tags:
        - Key: project
          Value: !Ref ProjectTag

  UsagePlanKey:
    Type: AWS::ApiGateway::UsagePlanKey
    Properties:
      KeyId: !Ref ApiKey
      KeyType: API_KEY
      UsagePlanId: !Ref UsagePlan

  # API Gateway Resources and Methods
  StatusResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !GetAtt RestApi.RootResourceId
      PathPart: status

  StatusGetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref StatusResource
      HttpMethod: GET
      AuthorizationType: NONE
      ApiKeyRequired: true
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              application/json: '{"status": "off"}'
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: Empty

  StatusPutMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref StatusResource
      HttpMethod: PUT
      AuthorizationType: NONE
      ApiKeyRequired: true
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              application/json: '{"status": "updated"}'
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: Empty

  ToggleResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !GetAtt RestApi.RootResourceId
      PathPart: toggle

  TogglePutMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref ToggleResource
      HttpMethod: PUT
      AuthorizationType: NONE
      ApiKeyRequired: true
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              application/json: '{"status": "toggled"}'
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: Empty

  EffectsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !GetAtt RestApi.RootResourceId
      PathPart: effects

  RainbowResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !Ref EffectsResource
      PathPart: rainbow

  RainbowPutMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref RainbowResource
      HttpMethod: PUT
      AuthorizationType: NONE
      ApiKeyRequired: true
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              application/json: '{"status": "rainbow effect triggered"}'
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: Empty

  PulseResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !Ref EffectsResource
      PathPart: pulse

  PulsePutMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref PulseResource
      HttpMethod: PUT
      AuthorizationType: NONE
      ApiKeyRequired: true
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              application/json: '{"status": "pulse effect triggered"}'
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: Empty

  OffResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !GetAtt RestApi.RootResourceId
      PathPart: 'off'

  OffPutMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref OffResource
      HttpMethod: PUT
      AuthorizationType: NONE
      ApiKeyRequired: true
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              application/json: '{"status": "LEDs turned off"}'
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: Empty

  HealthResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !GetAtt RestApi.RootResourceId
      PathPart: health

  HealthGetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref HealthResource
      HttpMethod: GET
      AuthorizationType: NONE
      ApiKeyRequired: true
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              application/json: '{"status": "healthy"}'
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: Empty

  # API Gateway Deployment
  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - StatusGetMethod
      - StatusPutMethod
      - TogglePutMethod
      - RainbowPutMethod
      - PulsePutMethod
      - OffPutMethod
      - HealthGetMethod
    Properties:
      RestApiId: !Ref RestApi
      Description: Production deployment

  ApiStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      RestApiId: !Ref RestApi
      DeploymentId: !Ref ApiDeployment
      StageName: prod
      Tags:
        - Key: project
          Value: !Ref ProjectTag

  # CORS Support for all resources
  StatusOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref StatusResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      ApiKeyRequired: false
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
              method.response.header.Access-Control-Allow-Methods: '''GET,POST,PUT,DELETE,OPTIONS'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  ToggleOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref ToggleResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      ApiKeyRequired: false
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
              method.response.header.Access-Control-Allow-Methods: '''GET,POST,PUT,DELETE,OPTIONS'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  RainbowOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref RainbowResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      ApiKeyRequired: false
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
              method.response.header.Access-Control-Allow-Methods: '''GET,POST,PUT,DELETE,OPTIONS'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  PulseOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref PulseResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      ApiKeyRequired: false
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
              method.response.header.Access-Control-Allow-Methods: '''GET,POST,PUT,DELETE,OPTIONS'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  OffOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref OffResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      ApiKeyRequired: false
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
              method.response.header.Access-Control-Allow-Methods: '''GET,POST,PUT,DELETE,OPTIONS'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  HealthOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref HealthResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      ApiKeyRequired: false
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
              method.response.header.Access-Control-Allow-Methods: '''GET,POST,PUT,DELETE,OPTIONS'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  # Lambda Function for IoT Certificate CSR
  IoTCertificateCSRFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt IoTCertificateCSRFunctionRole.Arn
      Code:
        ZipFile: |
          import boto3
          import cfnresponse
          import os

          def handler(event, context):
              try:
                  if event['RequestType'] in ['Create', 'Update']:
                      iot_client = boto3.client('iot')
                      keys_cert = iot_client.create_keys_and_certificate(setAsActive=True)

                      # Save certificate and private key to files
                      os.makedirs('/tmp/certs', exist_ok=True)
                      with open('/tmp/certs/certificate.pem', 'w') as f:
                          f.write(keys_cert['certificatePem'])
                      with open('/tmp/certs/private.key', 'w') as f:
                          f.write(keys_cert['keyPair']['PrivateKey'])

                      # Get IoT endpoint
                      endpoint = iot_client.describe_endpoint(endpointType='iot:Data-ATS')
                      with open('/tmp/certs/endpoint.txt', 'w') as f:
                          f.write(endpoint['endpointAddress'])

                      response_data = {
                          'CSR': keys_cert['certificatePem'],
                          'CertificateId': keys_cert['certificateId'],
                          'CertificateArn': keys_cert['certificateArn']
                      }
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data)
                  else:
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
              except Exception as e:
                  cfnresponse.send(event, context, cfnresponse.FAILED, {'Error': str(e)})
      Runtime: python3.9
      Timeout: 30
      MemorySize: 128
      Tags:
        - Key: project
          Value: !Ref ProjectTag

  IoTCertificateCSRFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: IoTCertificateAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - iot:CreateKeysAndCertificate
                  - iot:DescribeEndpoint
                Resource: '*'
      Tags:
        - Key: project
          Value: !Ref ProjectTag

Outputs:
  ApiEndpoint:
    Description: API Gateway endpoint URL
    Value: !Sub https://${RestApi}.execute-api.${AWS::Region}.amazonaws.com/prod

  ApiKey:
    Description: API Key for authentication
    Value: !Ref ApiKey

  IoTEndpoint:
    Description: IoT Core endpoint
    Value: !GetAtt IoTCertificateCSR.endpoint

  ThingName:
    Description: Name of the created IoT Thing
    Value: !Ref ThingName